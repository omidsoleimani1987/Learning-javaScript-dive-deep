/*

The Event interface represents an event which takes place in the DOM.

An event can be triggered by the user action e.g. clicking the mouse button or tapping keyboard, or generated by APIs to represent the progress of an asynchronous task. It can also be triggered programmatically, such as by calling the HTMLElement.click() method of an element, or by defining the event, then sending it to a specified target using EventTarget.dispatchEvent().

for more on event Object and its properties and methods:
https://developer.mozilla.org/en-US/docs/Web/API/Event



DOM Events are sent to notify code of interesting things that have taken place. Each event is represented by an object which is based on the Event interface, and may have additional custom fields and/or functions used to get additional information about what happened. Events can represent everything from basic user interactions to automated notifications of things happening in the rendering model.

*) for more on Most common categories - good to know :
  - MDN : https://developer.mozilla.org/en-US/docs/Web/Events
  - W3 : https://www.w3schools.com/jsref/dom_obj_event.asp


ways of listening to events:

    - in html (not recommended):
        add attribute to html element for events
            <button onclick="alert('hi there');"></button>
    
    - in js:
*/
const btn = document.getElementById('btn');

// one way :
btn.onclick = myFunctionHandler; // without execute
// or
btn.onclick = function () {
  console.log('hi');
};
// or
btn.onclick = () => {
  console.log('hello');
};

// better practice:
const ourFunction = () => {
  console.log('greet');
};
btn.addEventListener('click', ourFunction);

//*) in this approach we are able to add and 'remove' event from the element:

// to remove event we can use removeEventListener, it is important to know what we pass into the 'addEventListener' should be exactly what we pass into the 'removeEventListener'.... not anonymous function, not arrow function, not bind function, jest the exact name of the function which we passed to the 'addEventListener'

btn.removeEventListener('click', ourFunction); // works

// these will not work:

btn.addEventListener('click', () => {
  console.log('hello');
});

btn.removeEventListener('click', () => {
  console.log('hello');
});

// these too, will not work:
btn.addEventListener('click', ourFunction.bind(this));
btn.removeEventListener('click', ourFunction.bind(this));

//but this will work:
boundFunction = ourFunction.bind(this);
btn.addEventListener('click', boundFunction);
btn.removeEventListener('click', boundFunction);
